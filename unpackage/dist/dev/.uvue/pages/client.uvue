










import { UDPClient, UDPClientSendOption, UDPData } from '@/uni_modules/uts-udp';

export default {
	data() {
		return {
			msg: "",
			messages: [] as UDPData[]
		}
	},
	methods: {
		onSendClick() {
			UDPClient.send({
				host: "255.255.255.255",
				port: 7000,
				receiveTimeout: 2000,
				msg: this.msg,
				enableRecive: true,
				onceReceive(data) {
					this.messages.push(data)
				},
				onError(error) {
					console.error(error);
				},
				onceReceiveTimeout() {
					console.warn("服务器超时未回复");
				},
			} as UDPClientSendOption);
		}
	}
}


function GenPagesClientRender(): VNode | null {
const _ctx = this
const _component_button = resolveComponent("button")

  return createElementVNode("view", utsMapOf({ class: "content" }), [
    createElementVNode("textarea", utsMapOf({
      modelValue: _ctx.msg,
      onInput: ($event: InputEvent): any => {_ctx.msg = $event.detail.value;
return $event.detail.value;},
      type: "textarea",
      "auto-height": "",
      placeholder: "请输入内容"
    }), null, 40 /* PROPS, HYDRATE_EVENTS */, ["modelValue", "onInput"]),
    createVNode(_component_button, utsMapOf({ onClick: _ctx.onSendClick }), utsMapOf({
      default: withCtx((): any[] => ["发送消息"]),
      _: 1 /* STABLE */
    }), 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({ class: "box" }), [
      createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.messages, (item, _, _): VNode => {
        return createElementVNode("view", utsMapOf({ class: "item" }), "服务器[" + toDisplayString(item.host) + "]回复消息：" + toDisplayString(item.msg), 1 /* TEXT */)
      }), 256 /* UNKEYED_FRAGMENT */)
    ])
  ])
}
const GenPagesClientStyles = [utsMapOf([["box", padStyleMapOf(utsMapOf([["padding", 10]]))]])]
