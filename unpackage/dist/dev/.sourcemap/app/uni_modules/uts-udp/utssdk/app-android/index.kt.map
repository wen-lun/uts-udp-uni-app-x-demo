{"version":3,"sources":["uni_modules/uts-udp/utssdk/app-android/index.uts"],"sourcesContent":["import DatagramSocket from 'java.net.DatagramSocket'\nimport InetAddress from 'java.net.InetAddress'\nimport DatagramPacket from 'java.net.DatagramPacket'\nimport ByteArray from 'kotlin.ByteArray'\nimport String from 'kotlin.String'\nimport SocketTimeoutException from 'java.net.SocketTimeoutException'\nimport InetSocketAddress from 'java.net.InetSocketAddress';\n\nexport class UDPData {\n\t/** 收到消息的目标地址 */\n\taddress : InetAddress\n\t/** 收到消息的目标主机 */\n\thost : String\n\t/** 收到消息的目标端口 */\n\tport : Int\n\t/** 消息长度 */\n\tsize : Int\n\t/** 消息 */\n\tmsg : String\n\n\tconstructor(address : InetAddress, host : String, port : Int, size : Int, msg : String) {\n\t\tthis.address = address;\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t\tthis.size = size;\n\t\tthis.msg = msg;\n\t}\n}\n\nexport type UDPClientSendOption = {\n\t/** 目标主机 */\n\thost : String\n\t/** 目标端口 */\n\tport : Number\n\t/** 发送的消息 */\n\tmsg : String\n\t/** 发送消息后，是否监听一次目标主机的回复，默认值false，若为true，则在onceReceive中回调目标主机的回复，若目标主机超时未回复，则回调onceTimeout */\n\tenableRecive ?: boolean\n\t/** 等待目标主机回复消息的超时时间，单位毫秒，默认5000 */\n\treceiveTimeout ?: Number\n\t/** 主机回复时接收的字节大小，单位是byte，默认1024 */\n\treceiveByteSize ?: Number\n\t/** 目标主机回复消息的回调函数 */\n\tonceReceive ?: (data : UDPData) => void\n\t/** 目标主机超时未回复的回调函数 */\n\tonceReceiveTimeout ?: () => void\n\t/** 出错的回调函数 */\n\tonError ?: (error : String) => void\n\t/** 结束的回调函数（调用成功、失败都会执行） */\n\tonCompleted ?: () => void;\n}\n\nclass UDPThread extends Thread {\n\tprivate callback : () => void\n\n\tconstructor(callback : () => void) {\n\t\tsuper();\n\t\tthis.callback = callback;\n\t}\n\n\toverride run() : void {\n\t\tthis.callback()\n\t}\n}\n\nexport class UDPServer {\n\tprivate port : Int\n\tprivate byteSize : Int\n\tprivate socket : DatagramSocket | null = null\n\tprivate isListener = false\n\n\tconstructor(port : Int, byteSize : Number = 1024) {\n\t\tthis.port = port;\n\t\tthis.byteSize = byteSize.toInt();\n\t}\n\n\t/** 监听接收消息 */\n\tlistener(receive : (data : UDPData) => void, error ?: (message : String) => void) {\n\t\tif (this.socket != null || this.isListener) return\n\n\t\t// 另开线程，避免阻塞UI线程\n\t\tnew UDPThread(() => {\n\t\t\t// 端口指定为null，不然内部会随机指定端口，当再调用bind函数绑定端口时，会报异常already bound\n\t\t\tconst socket = new DatagramSocket(null)\n\t\t\tthis.socket = socket;\n\t\t\ttry {\n\t\t\t\tsocket.bind(new InetSocketAddress(this.port))\n\t\t\t\tconst buff = new ByteArray(this.byteSize)\n\t\t\t\tconst packet = new DatagramPacket(buff, buff.size)\n\t\t\t\tthis.isListener = true;\n\t\t\t\twhile (true) {\n\t\t\t\t\tthis.socket?.receive(packet)\n\t\t\t\t\tconst msg = new String(buff, 0, packet.getLength())\n\t\t\t\t\tconst data = new UDPData(packet.getAddress(), packet.getAddress().getHostName(), packet.getPort().toInt(), msg.length, msg)\n\t\t\t\t\treceive(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (!socket.isClosed()) {\n\t\t\t\t\terror?.(e.message.toString())\n\t\t\t\t}\n\t\t\t\tthis.stop()\n\t\t\t}\n\t\t}).start()\n\t}\n\n\t/** 向客户端发送消息 */\n\tsend(msg : string, host : string, port : Int) {\n\t\tnew UDPThread(() => {\n\t\t\tconst bytes = msg.toByteArray()\n\t\t\tconst address = InetAddress.getByName(host)\n\t\t\tthis.socket?.send(new DatagramPacket(bytes, bytes.size, address, port))\n\t\t}).start()\n\t}\n\n\t/** 停止服务端 */\n\tstop() {\n\t\tthis.isListener = false\n\t\tthis.socket?.close()\n\t\tthis.socket = null\n\t}\n}\n\nexport class UDPClient {\n\tstatic send(option : UDPClientSendOption) {\n\t\t// 另开线程，避免阻塞UI线程\n\t\tnew UDPThread(() => {\n\t\t\tconst content = option.msg.toByteArray()\n\t\t\tconst socket = new DatagramSocket()\n\n\t\t\tlet receiveTimeout = option.receiveTimeout;\n\t\t\tlet receiveByteSize = option.receiveByteSize;\n\t\t\tlet enableRecive = option.enableRecive;\n\n\t\t\tif (receiveTimeout == null) receiveTimeout = 5000;\n\t\t\tif (receiveByteSize == null) receiveByteSize = 1024;\n\t\t\tif (enableRecive == null) enableRecive = false;\n\n\t\t\ttry {\n\t\t\t\tsocket.send(new DatagramPacket(content, content.size, InetAddress.getByName(option.host), option.port.toInt()))\n\t\t\t\tif (enableRecive) {\n\t\t\t\t\tconst buff = new ByteArray(receiveByteSize.toInt())\n\t\t\t\t\tconst packet = new DatagramPacket(buff, buff.size)\n\t\t\t\t\tsocket.setSoTimeout(receiveTimeout.toInt())\n\t\t\t\t\tsocket.receive(packet)\n\t\t\t\t\tconst receiveMsg = new String(buff, 0, packet.getLength())\n\t\t\t\t\tconst data = new UDPData(packet.getAddress(), packet.getAddress().getHostName(), packet.getPort().toInt(), receiveMsg.length, receiveMsg)\n\t\t\t\t\toption.onceReceive?.(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof SocketTimeoutException) {\n\t\t\t\t\toption.onceReceiveTimeout?.()\n\t\t\t\t} else {\n\t\t\t\t\toption.onError?.(e.message.toString())\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tsocket.close()\n\t\t\t\toption.onCompleted?.()\n\t\t\t}\n\t\t}).start()\n\t}\n}\n"],"names":[],"mappings":"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"}