{"version":3,"sources":["index.uts","pages/server.uvue?type=page","App.uvue","uni_modules/uts-udp/utssdk/app-ios/index.uts","uni_modules/uts-udp/utssdk/app-android/index.uts"],"sourcesContent":["\nimport App from './App.uvue'\r\n\r\nimport { createSSRApp } from 'vue'\r\nexport function createApp() {\r\n\tconst app = createSSRApp(App)\r\n\treturn {\r\n\t\tapp\r\n\t}\r\n}  \nexport function main(app: IApp) {\n    defineAppConfig();\n    definePageRoutes();\n    \n    (createApp()['app'] as VueApp).mount(app);\n}\n\nimport { AppConfig } from \"io.dcloud.uniapp.appframe\"\nexport class UniAppConfig extends AppConfig {\n    override name: string = \"uts-udp-uni-app-x-demo\"\n    override appid: string = \"__UNI__BC1FF7C\"\n    override versionName: string = \"1.0.0\"\n    override versionCode: string = \"100\"\n    override uniCompileVersion: string = \"3.98\"\n    // override tabBar = __uniTabBar\n    // override launchPage = __uniLaunchPage\n    \n    constructor() {}\n}\n\nimport GenPagesServerClass from './pages/server.uvue?type=page'\nimport GenPagesClientClass from './pages/client.uvue?type=page'\nfunction definePageRoutes() {\n__uniRoutes.push({ path: \"pages/server\", component: GenPagesServerClass, meta: { isQuit: true } as PageMeta, style: utsMapOf([[\"navigationBarTitleText\",\"客户端\"]]) } as PageRoute)\n__uniRoutes.push({ path: \"pages/client\", component: GenPagesClientClass, meta: { isQuit: false } as PageMeta, style: utsMapOf([[\"navigationBarTitleText\",\"客户端\"]]) } as PageRoute)\n}\nconst __uniTabBar: Map<string, any | null> | null = utsMapOf([[\"list\",[utsMapOf([[\"text\",\"服务端\"],[\"pagePath\",\"pages/server\"]]),utsMapOf([[\"text\",\"客户端\"],[\"pagePath\",\"pages/client\"]])]]])\nconst __uniLaunchPage: Map<string, any | null> = utsMapOf([[\"url\",\"pages/server\"],[\"style\",utsMapOf([[\"navigationBarTitleText\",\"客户端\"]])]])\n@Suppress(\"UNCHECKED_CAST\")\nfunction defineAppConfig(){\n  __uniConfig.entryPagePath = '/pages/server'\n  __uniConfig.globalStyle = utsMapOf([[\"navigationBarTextStyle\",\"black\"],[\"navigationBarTitleText\",\"uni-app x\"],[\"navigationBarBackgroundColor\",\"#F8F8F8\"],[\"backgroundColor\",\"#F8F8F8\"]])\n  __uniConfig.tabBar = __uniTabBar as Map<string, any> | null\n  __uniConfig.conditionUrl = ''\n  __uniConfig.uniIdRouter = new Map()\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\timport {\r\n\t\tUDPServer,\r\n\t\tUDPData\r\n\t} from \"@/uni_modules/uts-udp\";\r\n\r\n\tvar server : UDPServer | null = null;\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tmessages: [] as UDPData[],\r\n\t\t\t\tisStart: false\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tonEnableClick() {\r\n\t\t\t\tif (this.isStart) return;\r\n\t\t\t\tif (server == null) {\r\n\t\t\t\t\tserver = new UDPServer(7000);\r\n\t\t\t\t}\r\n\t\t\t\tserver?.listener(\r\n\t\t\t\t\t(data) => {\r\n\t\t\t\t\t\tthis.messages.push(data)\r\n\t\t\t\t\t\t// 回复客户端\r\n\t\t\t\t\t\tserver?.send(`已收到消息：${data.msg}`, data.host, data.port);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(error) => {\r\n\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t\tthis.isStart = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tthis.isStart = true;\r\n\t\t\t},\r\n\t\t\tonDisableClick() {\r\n\t\t\t\tserver?.stop();\r\n\t\t\t\tthis.isStart = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n\nfunction GenPagesServerRender(): VNode | null {\nconst _ctx = this\nconst _component_button = resolveComponent(\"button\")\n\n  return createElementVNode(\"view\", utsMapOf({ class: \"content\" }), [\n    createElementVNode(\"view\", utsMapOf({ class: \"btns\" }), [\n      isTrue(!_ctx.isStart)\n        ? createVNode(_component_button, utsMapOf({\n            key: 0,\n            type: \"primary\",\n            size: \"mini\",\n            onClick: _ctx.onEnableClick\n          }), utsMapOf({\n            default: withCtx((): any[] => [\"启动UDP服务\"]),\n            _: 1 /* STABLE */\n          }), 8 /* PROPS */, [\"onClick\"])\n        : createVNode(_component_button, utsMapOf({\n            key: 1,\n            type: \"warn\",\n            size: \"mini\",\n            onClick: _ctx.onDisableClick\n          }), utsMapOf({\n            default: withCtx((): any[] => [\"停止UDP服务\"]),\n            _: 1 /* STABLE */\n          }), 8 /* PROPS */, [\"onClick\"])\n    ]),\n    createElementVNode(\"view\", utsMapOf({ class: \"status\" }), toDisplayString(_ctx.isStart ? \"UDP服务已启动\" : \"UDP服务未启动\"), 1 /* TEXT */),\n    createElementVNode(\"view\", utsMapOf({ class: \"box\" }), [\n      createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.messages, (item, _, _): VNode => {\n        return createElementVNode(\"view\", utsMapOf({ class: \"item\" }), [\n          createElementVNode(\"view\", utsMapOf({ class: \"info\" }), [\n            createElementVNode(\"text\", utsMapOf({ class: \"label\" }), \"主机：\" + toDisplayString(item.host), 1 /* TEXT */),\n            createElementVNode(\"text\", utsMapOf({ class: \"label\" }), \"端口：\" + toDisplayString(item.port), 1 /* TEXT */)\n          ]),\n          createElementVNode(\"view\", utsMapOf({ class: \"msg\" }), \"消息：\" + toDisplayString(item.msg), 1 /* TEXT */)\n        ])\n      }), 256 /* UNKEYED_FRAGMENT */)\n    ])\n  ])\n}\nconst GenPagesServerStyles = [utsMapOf([[\"btns\", padStyleMapOf(utsMapOf([[\"padding\", 10]]))], [\"box\", padStyleMapOf(utsMapOf([[\"padding\", 10]]))], [\"item\", utsMapOf([[\".box \", utsMapOf([[\"padding\", 10]])]])]])]\n","\r\n\tlet firstBackTime = 0\r\n\texport default {\r\n\t\tonLaunch: function () {\r\n\t\t\tconsole.log('App Launch')\r\n\t\t},\r\n\t\tonShow: function () {\r\n\t\t\tconsole.log('App Show')\r\n\t\t},\r\n\t\tonHide: function () {\r\n\t\t\tconsole.log('App Hide')\r\n\t\t},\r\n\t\tonLastPageBackPress: function () {\r\n\t\t\tconsole.log('App LastPageBackPress')\r\n\t\t\tif (firstBackTime == 0) {\r\n\t\t\t\tuni.showToast({\r\n\t\t\t\t\ttitle: '再按一次退出应用',\r\n\t\t\t\t\tposition: 'bottom',\r\n\t\t\t\t})\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tfirstBackTime = 0\r\n\t\t\t\t}, 2000)\r\n\t\t\t} else if (Date.now() - firstBackTime < 2000) {\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tuni.exit()\r\n\t\t\t}\r\n\t\t},\r\n\t\tonExit: function () {\r\n\t\t\tconsole.log('App Exit')\r\n\t\t},\r\n\t}\r\n\n\nconst GenAppStyles = [utsMapOf([[\"uni-row\", padStyleMapOf(utsMapOf([[\"flexDirection\", \"row\"]]))], [\"uni-column\", padStyleMapOf(utsMapOf([[\"flexDirection\", \"column\"]]))]])]\n","","import DatagramSocket from 'java.net.DatagramSocket'\r\nimport InetAddress from 'java.net.InetAddress'\r\nimport DatagramPacket from 'java.net.DatagramPacket'\r\nimport ByteArray from 'kotlin.ByteArray'\r\nimport String from 'kotlin.String'\r\nimport SocketTimeoutException from 'java.net.SocketTimeoutException'\r\nimport InetSocketAddress from 'java.net.InetSocketAddress';\r\n\r\nexport class UDPData {\r\n\t/** 收到消息的目标地址 */\r\n\taddress : InetAddress\r\n\t/** 收到消息的目标主机 */\r\n\thost : String\r\n\t/** 收到消息的目标端口 */\r\n\tport : Int\r\n\t/** 消息长度 */\r\n\tsize : Int\r\n\t/** 消息 */\r\n\tmsg : String\r\n\r\n\tconstructor(address : InetAddress, host : String, port : Int, size : Int, msg : String) {\r\n\t\tthis.address = address;\r\n\t\tthis.host = host;\r\n\t\tthis.port = port;\r\n\t\tthis.size = size;\r\n\t\tthis.msg = msg;\r\n\t}\r\n}\r\n\r\nexport type UDPClientSendOption = {\r\n\t/** 目标主机 */\r\n\thost : String\r\n\t/** 目标端口 */\r\n\tport : Number\r\n\t/** 发送的消息 */\r\n\tmsg : String\r\n\t/** 发送消息后，是否监听一次目标主机的回复，默认值false，若为true，则在onceReceive中回调目标主机的回复，若目标主机超时未回复，则回调onceTimeout */\r\n\tenableRecive ?: boolean\r\n\t/** 等待目标主机回复消息的超时时间，单位毫秒，默认5000 */\r\n\treceiveTimeout ?: Number\r\n\t/** 主机回复时接收的字节大小，单位是byte，默认1024 */\r\n\treceiveByteSize ?: Number\r\n\t/** 目标主机回复消息的回调函数 */\r\n\tonceReceive ?: (data : UDPData) => void\r\n\t/** 目标主机超时未回复的回调函数 */\r\n\tonceReceiveTimeout ?: () => void\r\n\t/** 出错的回调函数 */\r\n\tonError ?: (error : String) => void\r\n\t/** 结束的回调函数（调用成功、失败都会执行） */\r\n\tonCompleted ?: () => void;\r\n}\r\n\r\nclass UDPThread extends Thread {\r\n\tprivate callback : () => void\r\n\r\n\tconstructor(callback : () => void) {\r\n\t\tsuper();\r\n\t\tthis.callback = callback;\r\n\t}\r\n\r\n\toverride run() : void {\r\n\t\tthis.callback()\r\n\t}\r\n}\r\n\r\nexport class UDPServer {\r\n\tprivate port : Int\r\n\tprivate byteSize : Int\r\n\tprivate socket : DatagramSocket | null = null\r\n\tprivate isListener = false\r\n\r\n\tconstructor(port : Int, byteSize : Number = 1024) {\r\n\t\tthis.port = port;\r\n\t\tthis.byteSize = byteSize.toInt();\r\n\t}\r\n\r\n\t/** 监听接收消息 */\r\n\tlistener(receive : (data : UDPData) => void, error ?: (message : String) => void) {\r\n\t\tif (this.socket != null || this.isListener) return\r\n\r\n\t\t// 另开线程，避免阻塞UI线程\r\n\t\tnew UDPThread(() => {\r\n\t\t\t// 端口指定为null，不然内部会随机指定端口，当再调用bind函数绑定端口时，会报异常already bound\r\n\t\t\tconst socket = new DatagramSocket(null)\r\n\t\t\tthis.socket = socket;\r\n\t\t\ttry {\r\n\t\t\t\tsocket.bind(new InetSocketAddress(this.port))\r\n\t\t\t\tconst buff = new ByteArray(this.byteSize)\r\n\t\t\t\tconst packet = new DatagramPacket(buff, buff.size)\r\n\t\t\t\tthis.isListener = true;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tthis.socket?.receive(packet)\r\n\t\t\t\t\tconst msg = new String(buff, 0, packet.getLength())\r\n\t\t\t\t\tconst data = new UDPData(packet.getAddress(), packet.getAddress().getHostName(), packet.getPort().toInt(), msg.length, msg)\r\n\t\t\t\t\treceive(data)\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (!socket.isClosed()) {\r\n\t\t\t\t\terror?.(e.message.toString())\r\n\t\t\t\t}\r\n\t\t\t\tthis.stop()\r\n\t\t\t}\r\n\t\t}).start()\r\n\t}\r\n\r\n\t/** 向客户端发送消息 */\r\n\tsend(msg : string, host : string, port : Int) {\r\n\t\tnew UDPThread(() => {\r\n\t\t\tconst bytes = msg.toByteArray()\r\n\t\t\tconst address = InetAddress.getByName(host)\r\n\t\t\tthis.socket?.send(new DatagramPacket(bytes, bytes.size, address, port))\r\n\t\t}).start()\r\n\t}\r\n\r\n\t/** 停止服务端 */\r\n\tstop() {\r\n\t\tthis.isListener = false\r\n\t\tthis.socket?.close()\r\n\t\tthis.socket = null\r\n\t}\r\n}\r\n\r\nexport class UDPClient {\r\n\tstatic send(option : UDPClientSendOption) {\r\n\t\t// 另开线程，避免阻塞UI线程\r\n\t\tnew UDPThread(() => {\r\n\t\t\tconst content = option.msg.toByteArray()\r\n\t\t\tconst socket = new DatagramSocket()\r\n\r\n\t\t\tlet receiveTimeout = option.receiveTimeout;\r\n\t\t\tlet receiveByteSize = option.receiveByteSize;\r\n\t\t\tlet enableRecive = option.enableRecive;\r\n\r\n\t\t\tif (receiveTimeout == null) receiveTimeout = 5000;\r\n\t\t\tif (receiveByteSize == null) receiveByteSize = 1024;\r\n\t\t\tif (enableRecive == null) enableRecive = false;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tsocket.send(new DatagramPacket(content, content.size, InetAddress.getByName(option.host), option.port.toInt()))\r\n\t\t\t\tif (enableRecive) {\r\n\t\t\t\t\tconst buff = new ByteArray(receiveByteSize.toInt())\r\n\t\t\t\t\tconst packet = new DatagramPacket(buff, buff.size)\r\n\t\t\t\t\tsocket.setSoTimeout(receiveTimeout.toInt())\r\n\t\t\t\t\tsocket.receive(packet)\r\n\t\t\t\t\tconst receiveMsg = new String(buff, 0, packet.getLength())\r\n\t\t\t\t\tconst data = new UDPData(packet.getAddress(), packet.getAddress().getHostName(), packet.getPort().toInt(), receiveMsg.length, receiveMsg)\r\n\t\t\t\t\toption.onceReceive?.(data)\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof SocketTimeoutException) {\r\n\t\t\t\t\toption.onceReceiveTimeout?.()\r\n\t\t\t\t} else {\r\n\t\t\t\t\toption.onError?.(e.message.toString())\r\n\t\t\t\t}\r\n\t\t\t} finally {\r\n\t\t\t\tsocket.close()\r\n\t\t\t\toption.onCompleted?.()\r\n\t\t\t}\r\n\t\t}).start()\r\n\t}\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAiBA,iCAAS;ACGR,8BACC;8BACA;ADnBF,4BAAS;+BEsBD;+BAVA;AAdP,IAAI,wBAAgB,CAAC;AACN;;iBACJ,wBAAY;YACrB,QAAQ,GAAG,CAAC;QACb;;kBACQ,sBAAY;YACnB,QAAQ,GAAG,CAAC;QACb;;eACQ,MAAY;YACnB,QAAQ,GAAG,CAAC;QACb;;4BACqB,MAAY;YAChC,QAAQ,GAAG,CAAC;YACZ,IAAI,iBAAiB,CAAC,EAAE;gBACvB,+BACC,QAAO,YACP,WAAU;gBAEX,gBAAgB,KAAK,GAAG;gBACxB,WAAW,KAAM;oBAChB,gBAAgB,CAAC;gBAClB,GAAG,IAAI;YACR,OAAO,IAAI,KAAK,GAAG,KAAK,gBAAgB,IAAI,EAAE;gBAC7C,gBAAgB,KAAK,GAAG;gBACxB;YACD;QACD;;eACQ,MAAY;YACnB,QAAQ,GAAG,CAAC;QACb;;;;;;;;;;;;uBAIoB,SAAW,aAAW,cAAc,SAAW,mBAAiB,SAAa,gBAAc,cAAc,SAAW,mBAAiB;;;AAH1J;;;;;;;;ADNA,IAAI,QAAS,aAAmB,IAAI;;;;;;;;;;;;;;;ADrB9B,IAAS,2BAAY;IAC3B,IAAM,MAAM;IACZ,OAAO;QACN,IAAA,MAAA;KACA;AACF;AACO,IAAS,KAAK,KAAK,IAAI,EAAE;IAC5B;IACA;IAEA,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;AACzC;AAGO,WAAM,eAAqB;IAC9B,aAAS,MAAM,MAAM,GAAG,yBAAwB;IAChD,aAAS,OAAO,MAAM,GAAG,iBAAgB;IACzC,aAAS,aAAa,MAAM,GAAG,QAAO;IACtC,aAAS,aAAa,MAAM,GAAG,MAAK;IACpC,aAAS,mBAAmB,MAAM,GAAG,OAAM;IAI3C,aAAc,CAAC;AACnB;AAIA,IAAS,mBAAmB;IAC5B,YAAY,IAAI,CAAsJ,UAAnJ,OAAM,gBAAgB,iCAAgC,OAA0B,SAAlB,SAAQ,IAAI,GAAgB,QAAO,SAAW,4BAAyB;IACxJ,YAAY,IAAI,CAAuJ,UAApJ,OAAM,gBAAgB,iCAAgC,OAA2B,SAAnB,SAAQ,KAAK,GAAgB,QAAO,SAAW,4BAAyB;AACzJ;AACA,IAAM,aAAa,IAAI,MAAM,EAAE,GAAG,MAAkB,SAAW,UAAO;IAAC,SAAW,UAAO,OAAQ,cAAW;IAAkB,SAAW,UAAO,OAAQ,cAAW;CAAkB;AACrL,IAAM,iBAAiB,IAAI,MAAM,EAAE,GAAG,KAAW,SAAW,SAAM,gBAAiB,WAAQ,SAAW,4BAAyB;AAC/H,CAAC,SAAS;AAAiB,IAClB,kBAAiB;IACxB,YAAY,aAAa,GAAG;IAC5B,YAAY,WAAW,GAAG,SAAW,4BAAyB,SAAU,4BAAyB,aAAc,kCAA+B,WAAY,qBAAkB;IAC5K,YAAY,MAAM,GAAG,YAAY,EAAE,CAAC,IAAI,MAAM,EAAE,GAAG;IACnD,YAAY,YAAY,GAAG;IAC3B,YAAY,WAAW,GAAG,AAAI;AAChC;;0BI7CC"}